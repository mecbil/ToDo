ToDo & Co —-TodoList

 

ToDo & Co - TodoList
Documentation technique

 

 

Page 1/9
ToDo & Co —-TodoList

 

Table des matières

ToDo & Co-TodoList..…...…............................. sienne 1
1. Présentation Projet... ss ssssssssesnensesneesneenereesseeseneeerneeneeeenserenee 3
1.1 Technologies... iii 3
1.2 Librairies... sise 3
1.3 Prérequis et conseils... iii 3
1.3 Installation du projet... sisi 4
2.Paramétrage du site... sise seenenrenneneneneneeenesneeeeeeeeeee 5
2.1Fichiers d'authentification............................. sise 5
2.2Système d'encryptage de mot de passe... 5
2.3Contrôle des accès... sise 5
2.4Stockage des utilisateurs... sis 6
3.Base de données... sense nee 7
3-1 Modifications de la base de données... 7
3-2Modification et création d'une table... 7
4.Fonctionnement de l’authentification................................ seen 8
4.1 Page authentification... issue 8
4.2. Soumission du formulaire... see 8
4.3. Redirection de l'utilisateur... ss 8
5. Collaboration... sense een eereeeeeeeenee 9

 

Page 2/9
ToDo & Co —-TodoList

 

1. Présentation Projet

1.1 Technologies

Le projet a été mis à jour vers une version de symfony plus récente et stable : v4.4. Pour le
bon fonctionnement du projet, la version 7.1.3 de PHP est requise.

À titre informatif la version 5 de symfony est déjà sortie, mais une utilisation de cette
version n'est pas encore envisageable en l'état.

1.2 Librairies

Les libraires sont toutes installés par Composer, et sont donc visible sur le site
https://packagist.org. Toutes les librairies sont listées dans le fichier composer.json à la racine du
projet, il faut pas hésiter à faire des mises à jours, car cela peut corriger une potentielle faille de
sécurité. Cependant, une consultation de la documentation est obligatoire pour éviter toutes
complications ! Par exemple un conflit de dépendance .

Commande de mise à jour :

composer update

 

1.3 Prérequis et conseils

l'est important de savoir, que pour l’utilisation de phpunit, xDebug est requis pour faire un
rendu visuel en HTML. Bien entendu, pour l’utilisation de composer il faudra installer le logiciel.
Et enfin, ci vous avez envie d'optimiser plus votre site je vous conseille blackfire .

Documentation xdebug : https://xdebug.org/docs/install
Documentation composer : https://getcomposer.org/doc/oo-intro.md
Documentation blackfire :https://blackfire.io/docs/up-and-running/installation

 

Page 3/9
ToDo & Co —-TodoList

 

1.3 Installation du projet

Pour installer le projet vous devrez faire les manipulations suivantes :

1. Clonezle repo

git clone https://github.com/damienvalade/OC-P8-TODOLIST.git

 

3. Modifier le .env avec vos informations & mettre en place la bdd

Voir pages

4. Installez les dépendances :

composer install

 

 

Page 4/9
ToDo & Co —-TodoList

 

2.Paramétrage du site

2.1Fichiers d'authentification

 

 

 

 

 

 

Type Fichier Description

Configuration config/packages/security.yamil Configuration du processus
d’authentification

Entité src/Entity/User.php Entité utilisateur

Contrôleur src/Controller/SecurityController.php Contrôleur connexion l
déconnexion

Authentification |src/Security/LoginFormAuthenticator.php | Méthodes du processus
d’authentification de l’application

Vue templates/security/login.html.twig Template du formulaire de
connexion

 

 

 

 

2.2Système d'encryptage de mot de passe

Le mot de passe est encrypté dans la basse de donnée, pour plus de sécurité. L'encryptage
est en mode automatique pour le moment, ce qui correspond au meilleur choix pour la version de
symfony du site. Il est bien entendu possible de changer le mode dans le ficher de configuration
« secrity.yam » dans le bloc « encoders ».

 

Plus de détails sur les types d'encryptage : https://symfony.com/blog/new-in-symfony-4-3-native-
password-encoder

2.3Contrôle des accès

Cette partie du fichier « security.yam », sert au contrôle des accès des différentes partie du
site. Elles peuvent bien entendu être modifiées pour changer le rôle de l'utilisateur pour la route.

 

Page 5/9

 
ToDo & Co —-TodoList

A [rc Ile : 1S_AUTHENTICATED_ANONYMOUSLY }

AUUEIES : ROLE_ADMIN }
2 AJ, : ROLE_USER }

 

*__ Path représente la route exemple : /users
*__ Roles représente le rôle de l'utilisateur exemple : ROLE_ADMIN

Pour plus de détails sur le composant security : https://symfony.com/doc/current/security.html

2.4Stockage des utilisateurs

Les donnés utilisateurs sont stockés dans une basse de données MySql. Plus précisément
dans la table user. Il faut savoir que le champ Username est unique et il est possible de rajouter un
autre champs unique. Il faudra simplement aller dans l'entité user : src/entity/user, et de rajouter
« unique = true » à l’'annotation @Column.

Exemple :

 

ii roles j
CE m m
id password username Oo nejson) email

[ 4 Éditer % Copier @ Supprimer 1 $argon2id$v=19$m=65536,1=4,p=1$0EIZLmZ0cFNxVdiTig. admin l'ROLE_ADMIN'] admin@admin fr

Ci-contre un exemple d'une entrée dans la table user. On peut voir que le password
présent est bien encrypté.

Pour faire des requêtes sur la bdd il faudra utiliser le composant Doctrine. Les tables sont
représentées en entité, et sont visitable dans le dossier : src/Entity/. Exemple de requête sur la
table user.

 

On peut retranscrire ça avec la requête SOL :
SELECT * FROM User

Plus de détails des requêtes avec doctrine :
https://symfony.com/doc/current/doctrine.html#querving-for-objects-the-repository

 

Page 6/9
ToDo & Co —-TodoList

 

3.Base de données

3.1 Modifications de la base de données

Si pour une raison ou une autre vous voudriez changer de base de donnée. Il faudra
changer les informations de connexion dans le fichier .env à la racine du projet.

Détail configuration BDD: https://symfony.com/doc/current/doctrine.html#configuring-the-
database

3.2Modification et création d'une table

Pour modifier ou créer une table, il faut utiliser le système d’entité de doctrine. Pour ce
faire, il faut rentrer ces commandes dans un terminal à la racine du projet. Voici la marche à
suivre.

Création & Mise à jour d'une entité

php bin/console make:entity

 

Création des fichiers de migration

php bin/console make:migrations

 

Mise à jour de la structure de la base de données selon les migrations

php bin/console doctrine:migrations:migrate

 

 

Page 7/9
ToDo & Co —-TodoList

 

4.Fonctionnement de l'authentification

4.1 Page authentification

Dans un premier temps, la personne va devoir rentrer ces identifiants sur la page
login.html.twig à la route /login. Pour accéder à cette page, la méthode login est exécutée, sur le
Controller : SecurityController. Cette méthode sert à générer la page, et à envoyer des données à
la vue avec un render.

4.2. Soumission du formulaire

Quand le formulaire est validé par l'utilisateur, les données sont récupérées par la classe
LoginFormAuthenticator, qui se charge de l’authentification. Cette classe est générique à la
création du système d'authentification de la librairie Security-Bundle.

L'authentification s'opère de cette manière :

- Récupération des champs du formulaire grâce à la méthode getCredentials

- Récupération de l'utilisateur dans la BDD par son username, en passant par la
vérification de validité d’un token Csrf à la méthode getUser

- Vérification du password associé à l'utilisateur par la méthode checkCredentials

4.3. Redirection de l'utilisateur

Suivant ci, la personne c'est bien authentifier ou pas. La méthode
onAuthenticationSuccess, la redirigera vers la dernière page qu'elle à consulté, ou la page de
défaut, en cas de succès. À contrario, un message d'erreur sera affiché au-dessus du formulaire de
connexion.

Détail création login form : https://symfony.com/doc/current/security/form login setup.html

 

Page 8/9
ToDo & Co —-TodoList

 

5. Collaboration

Le développement de l’application doit respecter les normes de qualité PSR-4 et dois bien
entendu respecter les deux contrôleurs de qualité mis en place. Les liens vers les Dashbords sont
disponibles dans l’Audit.

Lien : https://sithub.com/damienvalade/OC-P8-TODOLIST/blob/master/documentation/P8-
Audit.pdf

Pour la collaboration en elle-même, le système est déjà mis en place grâce sur github. Mais
je pense que la création d’une organisation sur le site serrais un plus pour le management du projet
et des contributeurs.

Actuellement deux possibilités peuvent être mis en place pour la modification du code. Soit
de fork le main repository ou bien d’invité le contributeur par le créateur du répository. Et ensuite,
de faire les manipulations décrites sur la page 4.

Pour les bonnes pratiques de git, il faudra créer une branche par fonctionnalité a développé.
Ou sinon une branche par développeur au minimum. Cela évitera les conflits de fichiers. Car ci un
développeur modifie le même fichier qu’un autre il y aura un conflit, et cela pourrais

 

Page 9/9
